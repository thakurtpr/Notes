unordered_Set := 0(1) in average Case and 0(n) in worst Case 

<<--------Syntax------->>

unordered_set<object_type> variable_name;



Example:
unordered_set<int> s;
unordered_set<string> str;

<<--------Syntax------->>



<<--------Functions in unordered_Set------->>

Insert: insert(element): Adds an element to the set.
Search: find(element): Returns an iterator to the element if found, or end() if not.
Delete: erase(element): Removes the element from the set.
Size: size(): Returns the number of elements in the set.
Empty: empty(): Returns true if the set is empty, false otherwise.


Insert: mySet.insert(5);
Size: mySet.size();
Search: mySet.find(3);
Delete: mySet.erase(3);
Empty: mySet.empty();
Clear: mySet.clear();

<<--------Functions in unordered_Set------->>


<<--------Sample Program------->>

#include <iostream>
#include <unordered_set>

int main() {
    // Create an empty unordered set
    std::unordered_set<int> mySet;

    // Insert elements
    mySet.insert(5);
    mySet.insert(3);
    mySet.insert(1);
    mySet.insert(5); // Duplicate, ignored

    // Print size
    std::cout << "Size: " << mySet.size() << std::endl;

    // Search for an element
    auto it = mySet.find(3);
    if (it != mySet.end()) {
        std::cout << "Found: " << *it << std::endl;
    } else {
        std::cout << "Not found" << std::endl;
    }

    // Delete an element
    mySet.erase(3);
    std::cout << "Size after erase: " << mySet.size() << std::endl;

    // Check if empty
    if (mySet.empty()) {
        std::cout << "Set is empty" << std::endl;
    } else {
        std::cout << "Set is not empty" << std::endl;
    }

    // Clear the set
    mySet.clear();
    std::cout << "Size after clear: " << mySet.size() << std::endl;

    // Check if empty again
    if (mySet.empty()) {
        std::cout << "Set is empty" << std::endl;
    } else {
        std::cout << "Set is not empty" << std::endl;
    }

    return 0;
}

<<--------Sample Program------->>

<<--------Sample Program 2------->>

#include<bits/stdc++.h>

using namespace std;

int main() {
  unordered_set < int > s;
  for (int i = 1; i <= 10; i++) {
    s.insert(i);
  }

  cout << "Elements present in the unordered set: ";
  for (auto it = s.begin(); it != s.end(); it++) {
    cout << * it << " ";
  }
  cout << endl;
  int n = 2;
  if (s.find(2) != s.end())
    cout << n << " is present in unordered set" << endl;

  s.erase(s.begin());
  cout << "Elements after deleting the first element: ";
  for (auto it = s.begin(); it != s.end(); it++) {
    cout << * it << " ";
  }
  cout << endl;

  cout << "The size of the unordered set is: " << s.size() << endl;

  if (s.empty() == false)
    cout << "The unordered set is not empty " << endl;
  else
    cout << "The unordered set is empty" << endl;
  s.clear();
  cout << "Size of the unordered set after clearing all the elements: " << s.size();
}
Output:

Elements present in the unordered set: 10 9 8 7 2 1 3 4 5 6
2 is present in unordered set
Elements after deleting the first element: 9 8 7 2 1 3 4 5 6
The size of the unordered set is: 9
The unordered set is not empty
Size of the unordered set after clearing all the elements: 0

<<--------Sample Program 2------->>



<<--------Note------->>

In your example, the elements are inserted in the order 1-10, but when you print the elements, 
they may appear in a different order, such as:
Elements present in the unordered set: 3 9 1 6 8 2 5 4 10 7
This is because the hash function has mapped each element to a particular bucket, 
and the order of the buckets is not the same as the order in which the elements were inserted.
If you need to preserve the order of insertion, you may want to consider using a different container, 
such as a vector or a list. Alternatively, you can use a map or an unordered_map with the element as the key and a dummy value,
which will preserve the order of insertion.

<<--------Note------->>