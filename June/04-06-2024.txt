public: An access modifier that makes the main method accessible from anywhere.
static: A keyword that allows the main method to be called without having to instantiate the class.
void: This specifies that the main method does not return any value.
main: The name of the method that is the entry point for any Java application.
String args[]: The parameter for the main method, which can accept an array of strings from the command line.


 Day[] DayNow = Day.values();
 
 Day[]: An array type that can hold elements of the Day enum
 
 
 
	DayNow: The name of the variable.
	Day.values(): A method call that returns all the values of the Day enum as an array.
	
	
	
	OOPs in Java
	
	Encapsulation === > Binding Code And data in a single unit 
	Abstraction  ==== > Hiding Internal Details and showing important Data 
	Polymorphism ==== > One Task in Different Ways 
	Inheritance ===== > One object acquires properties and behaviour of another object 
	
	
	
	
	
--->If you define multiple classes in a single Java source file, 
	it is a good idea to save the file name with the class name which has main() method.
	
	
	
	
	
	
*****()()()()

3 Ways to initialize object
There are 3 ways to initialize object in Java.
ðŸ˜ŠBy reference variable
ðŸ˜ŠBy method
ðŸ˜ŠBy constructor
	
*****()()()()()	
	
---------------------------------------
	
By reference variable : = 

**

class Student{  
 int id;  
 String name;  
} 

** 

*****
 Student s1=new Student();  
  s1.id=101;  
  s1.name="Sonoo";  
*****

---------------------------------------



---------------------------------------


â€¢â€¢â€¢â€¢â€¢>>>Initialization through method : =


class Student{  
 int rollno;  
 String name;  
 void insertRecord(int r, String n){  
  rollno=r;  
  name=n;  
 }  
 void displayInformation(){System.out.println(rollno+" "+name);}  
}  
class TestStudent4{  
 public static void main(String args[]){  
  Student s1=new Student();  
  Student s2=new Student();  
  s1.insertRecord(111,"Karan");  
  s2.insertRecord(222,"Aryan");  
  s1.displayInformation();  
  s2.displayInformation();  
 }  
 
 
-----------------------------------------




This Keyword  in JAVA : =====


â€¢â€¢â€¢â€¢â€¢==>>  this: to refer current class instance variable
â€¢â€¢â€¢â€¢â€¢==>>  this: to invoke current class method
â€¢â€¢â€¢â€¢â€¢==>>  this() : to invoke current class constructor	
				**Calling default constructor from parameterized constructor:
				class A{  
					A()
					{
						System.out.println("hello a");
					}  
					A(int x)
					{  
					this();  
					System.out.println(x);  
					}  
				}
				
				
				
				
				**Calling parameterized constructor from default constructor:
				class A{  
					A(){  
					this(5);  
					System.out.println("hello a");  
					}  
					A(int x){  
					System.out.println(x);  
					}  
					}  
					


[---Method Over Riding---]  :==

If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.





