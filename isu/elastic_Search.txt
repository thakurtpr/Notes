PS C:\Users\INT_163> docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -v elasticsearch-data:/usr/share/elasticsearch/data --restart always docker.elastic.co/elasticsearch/elasticsearch:8.15.0
530921596a2aee4a57273082e1dd1c39c05930d54a497aedc4170353432e7e64
PS C:\Users\INT_163> docker ps -a
CONTAINER ID   IMAGE                                                  COMMAND                  CREATED         STATUS         PORTS                                            NAMES
530921596a2a   docker.elastic.co/elasticsearch/elasticsearch:8.15.0   "/bin/tini -- /usr/l…"   5 seconds ago   Up 4 seconds   0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp   elasticsearch
PS C:\Users\INT_163> docker ps 
CONTAINER ID   IMAGE                                                  COMMAND                  CREATED          STATUS          PORTS                                            NAMES
530921596a2a   docker.elastic.co/elasticsearch/elasticsearch:8.15.0   "/bin/tini -- /usr/l…"   35 seconds ago   Up 35 seconds   0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp   elasticsearch
PS C:\Users\INT_163> docker exec -it elasticsearch /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic
WARNING: Owner of file [/usr/share/elasticsearch/config/users] used to be [root], but now is [elasticsearch]
WARNING: Owner of file [/usr/share/elasticsearch/config/users_roles] used to be [root], but now is [elasticsearch]
This tool will reset the password of the [elastic] user to an autogenerated value.
The password will be printed in the console.
Please confirm that you would like to continue [y/N]y


Password for the [elastic] user successfully reset.
New value: d7d0aTdlyee4O5YxywYw


<<<<<<<---------Elasticsearch Endpoints------->>>>>>>>>


A wealth of information! Elasticsearch provides numerous endpoints to interact with your data. Here are some essential endpoints to get you started:

<=======Indexing Data======>
PUT /{index}: Create an index with optional settings and mappings.
PUT /{index}/_doc/{id}: Index a document with a specified ID.
POST /{index}/_doc/: Index a document without specifying an ID (Elasticsearch generates one).


<=======Retrieving Data======>
GET /{index}/_doc/{id}: Retrieve a document by ID.
GET /{index}/_search: Search for documents using a query.
GET /{index}/_search?q={query}: Search for documents using a query string.
GET /_cat/indices retrieve all the indices 
 

<=======Updating Data======>
POST /{index}/_update/{id}: Update a document by ID.
POST /{index}/_update/_doc/{id}: Update a document by ID (alternative syntax).


<=======Deleting Data======>
DELETE /{index}/_doc/{id}: Delete a document by ID.
DELETE /{index}: Delete an entire index.


<=======Other Endpoints======>
GET /_health: Check the health of your Elasticsearch cluster.
GET /_cluster/state: Retrieve cluster state information.
GET /_nodes: Retrieve information about nodes in your cluster.
GET /_settings: Retrieve settings for your cluster or index.


When running Elasticsearch in Docker, you'll need to access these endpoints using the container's IP address or hostname,
followed by the port number (default is 9200). For example:
http://localhost:9200/myindex/_doc/1


Replace localhost with the IP address or hostname of your Docker container.
Please note that this is not an exhaustive list, and Elasticsearch provides many more endpoints for advanced use cases. 
You can find the complete documentation on the official Elasticsearch website.